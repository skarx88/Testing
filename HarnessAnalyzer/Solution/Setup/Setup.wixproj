<Project Sdk="WixToolset.Sdk/5.0.2">
  <PropertyGroup Label="PROJECT">
    <Title>$(ProductTitle)</Title>
    <VerboseOutput>true</VerboseOutput>
    <OutputType>Package</OutputType>
    <BuildVersion>$(VersionShort)</BuildVersion>
    <DefineConstants>tempMsiBuildDir=TempMsiBuild\;Version=$(Version);VersionShort=$(VersionShort);IconPath=$(IconPath);ManufacturerShort=$(CompanyShort);PackageName=$(ProductName);Manufacturer=$(Company)</DefineConstants>
    <OutputPath>bin\</OutputPath>
    <Configurations>Release;Release_DEV</Configurations>
    <OutputName>$(ProductName)-$(Version)</OutputName>
    <DefaultCompressionLevel>high</DefaultCompressionLevel>
    <IconPath>$(MSBuildProjectDirectory)\..\E3.HarnessAnalyzer\E3.HarnessAnalyzer.ico</IconPath>
    <NoWarn>WIX8601;WIX1076</NoWarn>
    <Platforms>x64</Platforms>
    <ZStartBatchContentFileNameExtension>.msi</ZStartBatchContentFileNameExtension>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'!='Release'">
	<SignFiles>false</SignFiles>
  </PropertyGroup>
  <!---->
  <ItemGroup Label="REFERENCES">
    <ProjectReference Include="..\BorrowUtility\BorrowUtility.vbproj">
      <TargetFrameworks>$(ProductTargetFramework)</TargetFrameworks>
    </ProjectReference>
    <ProjectReference Include="..\E3.HarnessAnalyzer\E3.HarnessAnalyzer.vbproj" />
    <PackageReference Include="WixToolset.Bal.wixext" Version="5.0.2" />
    <PackageReference Include="WixToolset.Netfx.wixext" Version="5.0.2" />
    <PackageReference Include="WixToolset.UI.wixext" Version="5.0.2" />
    <PackageReference Include="Zuken.Build.Setup.Wix5" Version="0.0.1-rc3" />
  </ItemGroup>
  <!---->
  <ItemGroup>
    <BindPath Include="$(OutputPath)\TempMsiBuild\" />
    <Content Include="Common.wxi" />
    <None Include="WixUI_Zuken.wxi" />
  </ItemGroup>

  <Target Name="ON_AFTER_MSI_BUILD" AfterTargets="Build" Condition="Exists('$(TargetPath)')">
    <Exec Command="&quot;$(MsiInfoExePath)&quot; &quot;$(TargetPath)&quot; /T &quot;$(Title) $(Version)&quot; /J &quot;$(ProductName) Setup Wizard&quot; " />
	<!--HINT: ASCII Encoding is necessary for the zstart_environment parser, otherwise parsing will fail-->
	<WriteLinesToFile File="$(ZstartVersionInfoFilePath)" Lines="$(ZStart_Version_Info_Json)" Overwrite="true" Encoding="ASCII" />
  </Target>
  <!---->
  <!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ PREPARE INSTALLER CREATION \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->
  <!---->
  <Target Label="CLEAN_UP_BEFORE_INSTALLER_CREATION" Name="PreCleanUp" BeforeTargets="ResolveReferences">
    <Message Text="&gt;&gt;&gt; $(MSBuildProjectName): Cleaning up ..." Importance="high" />
    <RemoveDir Directories="$(SandboxOutputPath)" ContinueOnError="true"/>
    <RemoveDir Directories="$(PackagesOutputPath)" ContinueOnError="true"/>
    <RemoveDir Directories="$(InstallExtraFilesPath)" ContinueOnError="true"/>
    <RemoveDir Directories="$(TargetDir)\TempMsiBuild" ContinueOnError="true"/>
    <RemoveDir Directories="$(TempPayloadTargetDir)" ContinueOnError="true"/>
    <RemoveDir Directories="$(MSBuildProjectDirectory)\bin" ContinueOnError="true"/>
    <RemoveDir Directories="$(MSBuildProjectDirectory)\obj" ContinueOnError="true"/>
	<Delete Files="$(TargetDir)\$(TestDataCompressedFileName)" ContinueOnError="true"/>
	<Delete Files="$(TargetDir)\license.dat" ContinueOnError="true"/>
    <Message Text="&gt;&gt;&gt; $(MSBuildProjectName): Cleaning up ...Finished!" Importance="high" />
  </Target>
  <!-- ////////////////////////////////////////////////////////////// END: PREPARE INSTALLER CREATION /////////////////////////////////////////////////////////////////////////// -->
  <!---->
  <!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ CONFIGURE AFTER MSI CREATED AND SIGNED \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->
  <Target Name="ExcludeFilesFromSignig" BeforeTargets="CustomSignPayloadTask">
    <Message Text="&gt;&gt;&gt; $(MSBuildProjectName): excluding zstart files from signing ..." Importance="high" />
    <RemoveDir Directories="$(TempPayloadTargetDir)\$(PackagesFolderName)" ContinueOnError="true"/>
    <RemoveDir Directories="$(TempPayloadTargetDir)\$(SandboxFolderName)" ContinueOnError="true"/>
    <RemoveDir Directories="$(TempPayloadTargetDir)\$(InstallExtraFilesFolderName)" ContinueOnError="true" />
    <RemoveDir Directories="$(TempPayloadTargetDir)\$(TestDataFolderName)" ContinueOnError="true" />
    <Delete Files="$(TempPayloadTargetDir)\$(ZstartRunJsonFileName)" ContinueOnError="true"/>
    <Delete Files="$(TempPayloadTargetDir)\$(ZstartVersionInfoFileName)" ContinueOnError="true"/>
    <Delete Files="$(ZstartBatchFileName)" ContinueOnError="true"/>
	<Delete Files="$(TempPayloadTargetDir)\$(TestDataCompressedFileName)" ContinueOnError="true"/>
    <Message Text="&gt;&gt;&gt; $(MSBuildProjectName): excluding zstart files from signing ...Finished!" Importance="high" />
  </Target>
  <!---->
  <Target Name="FINALIZE_TEMP_PAYLOAD_AFTER_SIGNING_WAS_FINISHED" AfterTargets="CustomSignMsiTask" Condition="$(Configuration.StartsWith('Release'))">
    <Message Text="&gt;&gt;&gt; $(MSBuildProjectName): Creating zstart run files ..." Importance="high" />
    <WriteLinesToFile File="$(ZstartBatchFilePath)" Lines="$(ZstartBatchFileContent)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile File="$(ZstartRunJsonFilePath)" Lines="$(ZstartRunJsonContent)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile File="$(ZstartVersionInfoFilePath)" Lines="$(ZStart_Version_Info_Json)" Overwrite="true" Encoding="ASCII" />
    <MakeDir Directories="$(SandboxOutputPath)" ContinueOnError="true"/>
    <MakeDir Directories="$(PackagesOutputPath)" ContinueOnError="true"/>
    <MakeDir Directories="$(InstallExtraFilesPath)" ContinueOnError="true"/>
    <Copy SourceFiles="..\E3.HarnessAnalyzer\license.dat" DestinationFolder="$(InstallExtraFilesPath)" />
    <Exec Command="copy &quot;..\..\$(PackagesFolderName)\*.*&quot; &quot;$(PackagesOutputPath)&quot;" />
    <Exec Command="powershell -Command &quot;Invoke-WebRequest -OutFile '$(SandboxOutputPath)\$(SandboxRunBatchFileName)' -Uri '$(ZstartRunDownloadUrl)'&quot;" />
    <ZipDirectory SourceDirectory="..\TestData" DestinationFile="$(TargetDir)\$(TestDataCompressedFileName)" Overwrite="true" ContinueOnError="true" />
    <Message Text="&gt;&gt;&gt; $(MSBuildProjectName): Creating zstart run files ...Finished!" Importance="high" />
  </Target>
  <!-- ///////////////////////////////////////////////////////////// END: CONFIGURE AFTER MSI CREATED AND SIGNED ///////////////////////////////////////////////////////////////////////////// -->
  <!---->
  <Target Name="CreateVdLicenseFileAfterSigning" AfterTargets="CustomSignPayloadTask">
	<!--~~~~~~~~~~~~~~~~~ vdAutorize -->
	<Exec Command="$(VdAuthorizeCommand)" Condition="'$(Configuration)' == 'Release' AND '$(VectorDrawLicense)' != ''" ContinueOnError="false" />
	<!---->
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Create vdLicense file -->
	<Exec Command="$(VdLicFilePath) &quot;$(TempPayloadTargetDir)\E3.HarnessAnalyzer.dll&quot;" />
	<ReadLinesFromFile File="$(vdCreateLicenseLogFile)">
		<Output TaskParameter="Lines" ItemName="VdCreateLicFileContent" />
	</ReadLinesFromFile>
	<PropertyGroup Label="CheckLogVariables">
		<AllLinesVdLic>@(VdCreateLicFileContent)</AllLinesVdLic>
		<VectorDrawLicenseFileNotCreated Condition="$(AllLinesVdLic.Contains('No VectorDraw License File created')) OR $(AllLinesVdLic.Contains('No License file created'))">true</VectorDrawLicenseFileNotCreated>
	</PropertyGroup>
	<ItemGroup Label="OnCreateLicenseFileFailed">
		<WriteLinesToFile File="$(vdCreateLicenseLogFile)" Lines="$(NewLine) CMD: $(VdLicCommand)" Overwrite="false" Condition="'$(VectorDrawLicenseFileNotCreated)' == 'true'" />
		<Warning Text="Vector draw license file coud not be created. Application will run only in VectorDraw evaluation-mode! For more info see log file" File="$(vdCreateLicenseLogFile)" Condition="'$(VectorDrawLicenseFileNotCreated)' == 'true'" Code="VDLIC001" />
	</ItemGroup>
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END: Create vdLicense file -->
	<!---->
	<Exec Command="$(VdUnAuthorizeCommand)" Condition="'$(Configuration)' == 'Release' AND '$(VectorDrawLicense)' != ''" />
	<!--~~~~~~~~~~~~~~~~~ vdAutorize END (Issue #1) -->
  </Target>
</Project>